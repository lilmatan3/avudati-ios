import { openDB } from 'https://cdn.jsdelivr.net/npm/idb@7/+esm';
import Tesseract from 'https://cdn.jsdelivr.net/npm/tesseract.js@5.0.1/+esm';

window.cv = undefined;

window.Module = {
  onRuntimeInitialized() {
    main();
  }
};

const allTables = [];

async function main() {
  const id = localStorage.getItem("selectedPayslipId");
  if (!id) return alert("◊ú◊ê ◊†◊ë◊ó◊® ◊™◊ú◊ï◊©");

  const db = await openDB("PaycheckDB", 1);
  const item = await db.transaction("payslips", "readonly").objectStore("payslips").get(Number(id));
  if (!item) return alert("◊ú◊ê ◊†◊û◊¶◊ê ◊ß◊ï◊ë◊• ◊™◊ú◊ï◊©");

  const loadImage = (url) => new Promise((resolve) => {
    const img = new Image();
    img.src = url;
    img.onload = () => resolve(img);
  });

  if (item.isImage) {
    const blob = new Blob([item.data], { type: "image/png" });
    const imageUrl = URL.createObjectURL(blob);
    const img = await loadImage(imageUrl);
    await processImage(img);
    renderTables();
  } else {
    const pdfData = new Uint8Array(item.data);
    const pdf = await pdfjsLib.getDocument({ data: pdfData }).promise;

    for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {
      const page = await pdf.getPage(pageNum);
      const viewport = page.getViewport({ scale: 3.0 });

      const canvas = document.createElement("canvas");
      canvas.width = viewport.width;
      canvas.height = viewport.height;
      const context = canvas.getContext("2d");

      await page.render({ canvasContext: context, viewport }).promise;

      const img = await loadImage(canvas.toDataURL());
      await processImage(img);
    }

    renderTables();
  }
}

function detectTableType(text) {
  const norm = text.replace(/\s+/g, "").toLowerCase();
  if (norm.includes("◊ô◊©◊®◊ê◊ú")) return "IGNORE";

  const categories = [
    {
      title: "üóìÔ∏è ◊™◊ß◊ï◊§◊™ ◊î◊™◊©◊ú◊ï◊ù ◊ï◊û◊ñ◊î◊ô◊ù ◊õ◊ú◊ú◊ô◊ô◊ù",
      keywords: [
        "◊™◊ú◊ï◊©◊©◊õ◊®", "◊ó◊ï◊ì◊©", "◊©◊†◊™◊û◊°", "◊™◊ê◊®◊ô◊ö◊î◊§◊ß◊™", "◊û◊°◊§◊®◊™◊ô◊ß◊ü◊ô◊õ◊ï◊ô◊ô◊ù", "◊™◊ß◊ï◊§◊™◊©◊õ◊®"
      ]
    },
    {
      title: "üßç‚Äç‚ôÇÔ∏è ◊§◊®◊ò◊ô◊ù ◊ê◊ô◊©◊ô◊ô◊ù ◊©◊ú ◊î◊¢◊ï◊ë◊ì",
      keywords: [
        "◊©◊ù◊î◊¢◊ï◊ë◊ì", "◊û◊°◊§◊®◊ñ◊î◊ï◊™", "◊™◊ê◊®◊ô◊õ◊ï◊ú◊ô◊ì◊î", "◊û◊¶◊ë◊û◊©◊§◊ó◊™◊ô", "◊ï◊™◊ß", "◊©◊ú◊ë", "◊ì◊®◊í◊î", "◊ê◊ó◊ï◊ñ◊û◊©◊®◊î", "◊ß◊ï◊ì◊¢◊ï◊ë◊ì", "◊°◊†◊ô◊£", "◊ß◊ï◊ì◊™◊§◊ß◊ô◊ì"
      ]
    },
    {
      title: "üíµ ◊®◊õ◊ô◊ë◊ô ◊©◊õ◊®",
      keywords: [
        "◊û◊®◊õ◊ô◊ë◊ô◊™◊î◊™◊©◊ú◊ï◊û◊ô◊ù", "◊©◊õ◊®◊ô◊°◊ï◊ì", "◊û◊©◊ï◊ú◊ë", "◊™◊©◊ú◊ï◊û◊ô◊ù◊ë◊í◊ô◊ü", "◊©◊¢◊ï◊™◊†◊ï◊°◊§◊ï◊™", "◊™◊ï◊°◊§◊™", "◊ó◊ï◊ì◊©◊ó◊ï◊§◊©◊î", "◊û◊ô◊ú◊ï◊ô◊û◊ß◊ï◊ù", "◊©◊ï◊ï◊ô", "◊ë◊ï◊†◊ï◊°", "◊™◊û◊®◊ô◊•"
      ]
    },
    {
      title: "üí≥ ◊†◊ô◊õ◊ï◊ô◊ô ◊ó◊ï◊ë◊î",
      keywords: [
        "◊†◊ô◊õ◊ï◊ô◊ô◊ó◊ï◊ë◊î", "◊û◊°◊î◊õ◊†◊°◊î", "◊û◊°◊ë◊®◊ô◊ê◊ï◊™", "◊ë◊ô◊ò◊ï◊ó◊ú◊ê◊ï◊û◊ô", "◊°◊î◊õ◊†◊ô◊õ◊ï◊ô◊ô◊ù", "◊©◊ï◊ï◊ô◊©◊ô◊û◊ï◊©", "◊†◊ô◊õ◊ï◊ô◊û◊°"
      ]
    },
    {
      title: "üí≥ ◊†◊ô◊õ◊ï◊ô◊ô ◊í◊û◊ú",
      keywords: [
        "◊ß◊ï◊§◊í", "◊§◊†◊°◊ô◊î", "◊ß◊®◊ü◊î◊©◊™◊ú◊û◊ï◊™", "◊™◊í◊û◊ï◊ú◊ô◊ù", "◊†◊ô◊õ◊ï◊ô◊û◊¢◊ï◊ë◊ì", "◊†◊ô◊õ◊ï◊ô◊û◊¢◊°◊ô◊ß", "◊î◊§◊®◊©◊ï◊™"
      ]
    },
    {
      title: "üìã ◊†◊™◊ï◊†◊ô ◊û◊° / ◊¢◊ñ◊®",
      keywords: [
        "◊ô◊ó◊ô◊ì◊ï◊™◊û◊°", "◊°◊¢◊ô◊£", "◊†◊ß◊ï◊ì◊ï◊™◊ñ◊ô◊õ◊ï◊ô", "◊™◊ï◊©◊ë◊ô◊©◊®◊ê◊ú", "◊ê◊©◊î", "◊©◊†◊™◊ó◊ô◊©◊ï◊ë", "◊©◊†◊™◊í◊ë◊ô◊î"
      ]
    },
    {
      title: "‚è±Ô∏è ◊û◊©◊®◊ï◊™ ◊ï◊©◊¢◊ï◊™ ◊¢◊ë◊ï◊ì◊î",
      keywords: [
        "◊©◊¢◊ï◊™◊¢◊ë◊ï◊ì◊î", "◊î◊ô◊ß◊£◊û◊©◊®◊î", "◊©◊¢◊ï◊™◊ú◊™◊©◊ú◊ï◊ù", "◊©◊¢◊ï◊™◊ë◊§◊ï◊¢◊ú", "◊©◊¢◊ï◊™◊©◊ë◊™", "◊©◊¢◊ï◊™◊ó◊ï◊ë", "◊©◊¢◊ï◊™◊õ◊ï◊†◊†◊ï◊™"
      ]
    },
    {
      title: "üßæ ◊†◊™◊ï◊†◊ô◊ù ◊†◊ï◊°◊§◊ô◊ù",
      keywords: [
        "◊î◊ï◊ì◊¢◊î◊ú◊¢◊ï◊ë◊ì", "◊ó◊ï◊ß◊î◊í◊†◊™◊î◊©◊õ◊®", "◊©◊ï◊ï◊ô", "◊§◊ì◊ô◊ï◊ü", "◊û◊¢◊†◊ß", "◊ë◊®◊ï◊ò◊ï◊û◊¶◊ò◊ë◊®", "◊ô◊™◊®◊ï◊™"
      ]
    },
    {
      title: "üìÖ ◊ô◊™◊®◊ï◊™, ◊î◊ë◊®◊ê◊î ◊ï◊î◊ô◊¢◊ì◊®◊ï◊ô◊ï◊™",
      keywords: [
        "◊ó◊ï◊§◊©◊î", "◊û◊ó◊ú◊î", "◊î◊ë◊®◊ê◊î", "◊ô◊™◊®◊î◊ó◊ì◊©◊î", "◊ô◊™◊®◊î◊ß◊ï◊ì◊û◊™", "◊†◊ô◊¶◊ï◊ú", "◊ñ◊ô◊õ◊ï◊ô"
      ]
    },
    {
      title: "üí∏ ◊©◊õ◊® ◊†◊ò◊ï ◊ï◊°◊õ◊ï◊ù ◊ë◊ë◊†◊ß",
      keywords: [
        "◊©◊õ◊®◊†◊ò◊ï", "◊°◊õ◊ï◊ù◊ú◊™◊©◊ú◊ï◊ù", "◊†◊ò◊ï◊©◊ú◊ù", "◊°◊õ◊ï◊ù◊ú◊î◊¢◊ë◊®◊î", "◊§◊®◊ò◊ô◊ó◊©◊ë◊ï◊ü◊ë◊†◊ß", "◊û◊°◊§◊®◊ó◊©◊ë◊ï◊ü"
      ]
    },
    {
      title: "‚úÖ ◊°◊õ◊ï◊û◊ô◊ù ◊û◊°◊õ◊û◊ô◊ù",
      keywords: [
        "◊°◊î◊õ◊ú◊™◊©◊ú◊ï◊û◊ô◊ù", "◊°◊î◊õ◊†◊ô◊õ◊ï◊ô◊ô◊ù", "◊ë◊®◊ï◊ò◊ï", "◊†◊ò◊ï◊©◊ï◊ú◊ù", "◊ë◊®◊ï◊ò◊ï◊ú◊û◊°", "◊©◊ï◊ï◊î◊ë◊®◊ï◊ò◊ï"
      ]
    }
  ];

  for (const cat of categories) {
    const found = cat.keywords.filter(k => norm.includes(k));
    if (found.length >= 2) return cat.title;
  }

  return "üß© ◊†◊™◊ï◊†◊ô◊ù ◊†◊ï◊°◊§◊ô◊ù";
}

async function extractTextFromCanvas(canvas) {
  const dataUrl = canvas.toDataURL();
  const { data: ocr } = await Tesseract.recognize(dataUrl, 'heb+eng');
  return ocr.text.trim();
}

function isMostlyBlue(mat) {
  const pixels = mat.rows * mat.cols;
  let bluePixels = 0;
  for (let y = 0; y < mat.rows; y++) {
    for (let x = 0; x < mat.cols; x++) {
      const [r, g, b] = mat.ucharPtr(y, x);
      if (b > 100 && b > r + 30 && b > g + 30) bluePixels++;
    }
  }
  return bluePixels / pixels > 0.25;
}

function isMostlyBlack(mat) {
  const pixels = mat.rows * mat.cols;
  let darkPixels = 0;
  for (let y = 0; y < mat.rows; y++) {
    for (let x = 0; x < mat.cols; x++) {
      const [r, g, b] = mat.ucharPtr(y, x);
      const brightness = (r + g + b) / 3;
      if (brightness < 40) darkPixels++;
    }
  }
  return darkPixels / pixels > 0.4;
}

async function processImage(img) {
  const src = cv.imread(img);
  const gray = new cv.Mat();
  const blurred = new cv.Mat();
  const thresh = new cv.Mat();
  const contours = new cv.MatVector();
  const hierarchy = new cv.Mat();

  cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY);
  cv.medianBlur(gray, blurred, 3);
  cv.adaptiveThreshold(blurred, thresh, 255, cv.ADAPTIVE_THRESH_MEAN_C, cv.THRESH_BINARY_INV, 15, 10);
  cv.findContours(thresh, contours, hierarchy, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE);

  for (let i = 0; i < contours.size(); ++i) {
    const rect = cv.boundingRect(contours.get(i));
    if (rect.width < 40 || rect.height < 20) continue;

    const aspect = rect.width / rect.height;
    if (aspect > 0.85 && aspect < 1.15 && (rect.width < 160 || rect.height < 160)) continue;

    const roi = src.roi(rect);
    const canvas = document.createElement("canvas");
    canvas.width = roi.cols;
    canvas.height = roi.rows;
    cv.imshow(canvas, roi);

    const isSquareish = Math.abs(rect.width - rect.height) < 20;
    if (isMostlyBlue(roi) || (isMostlyBlack(roi) && isSquareish)) {
      roi.delete();
      continue;
    }

    const text = await extractTextFromCanvas(canvas);
    const title = detectTableType(text);
    roi.delete();

    allTables.push({ title, canvas, top: rect.y });
  }

  gray.delete(); blurred.delete(); thresh.delete(); contours.delete(); hierarchy.delete(); src.delete();
}

function renderTables() {
  const container = document.getElementById("tables-container");
  container.innerHTML = "";

  allTables.sort((a, b) => a.top - b.top);

  const grouped = {};
  for (const { title, canvas } of allTables) {
    if (!grouped[title]) grouped[title] = [];
    grouped[title].push(canvas);
  }

  const mainTitles = Object.keys(grouped).filter(t => t !== "üß© ◊†◊™◊ï◊†◊ô◊ù ◊†◊ï◊°◊§◊ô◊ù");
  const titlesSorted = [...mainTitles, "üß© ◊†◊™◊ï◊†◊ô◊ù ◊†◊ï◊°◊§◊ô◊ù"];

  for (const title of titlesSorted) {
    if (!grouped[title]) continue;

    const label = document.createElement("h3");
    label.textContent = title;
    container.appendChild(label);

    grouped[title].forEach(canvas => container.appendChild(canvas));

    const explanations = document.querySelectorAll('#explanations [data-title]');
    let explanationBlock = null;

    for (const block of explanations) {
      const key = block.getAttribute('data-title').replace(/[^◊ê-◊™A-Za-z0-9]/g, '').trim();
      const normalizedTitle = title.replace(/[^◊ê-◊™A-Za-z0-9]/g, '').trim();
      if (normalizedTitle.includes(key) || key.includes(normalizedTitle)) {
        explanationBlock = block;
        break;
      }
    }

    if (explanationBlock) {
      const titleDiv = document.createElement("div");
      titleDiv.textContent = "‚ùì ◊î◊°◊ë◊®◊ô◊ù ◊†◊ï◊°◊§◊ô◊ù ◊¢◊ú ◊®◊õ◊ô◊ë◊ô ◊î◊ò◊ë◊ú◊î:";
      titleDiv.style.fontWeight = "bold";
      titleDiv.style.margin = "10px 0 5px";
      container.appendChild(titleDiv);

      const clone = explanationBlock.cloneNode(true);
      clone.style.display = "flex";
      clone.classList.add("explanation");
      container.appendChild(clone);
    }
  }

  document.getElementById("loading-message").style.display = "none";
}

// ◊§◊ï◊§◊ê◊§ ◊ò◊ê◊†◊í◊ú◊ô◊ù
document.addEventListener("click", (e) => {
  const popup = document.getElementById("popup-explanation");
  const popupText = popup.querySelector(".popup-text");
  const closeBtn = popup.querySelector(".popup-close");

  if (e.target === popup || e.target === closeBtn) {
    popup.style.display = "none";
    return;
  }

  if (e.target.classList.contains("tooltip")) {
    e.stopPropagation();
    const textEl = e.target.querySelector(".tooltiptext");
    if (textEl) {
      popupText.innerHTML = textEl.innerHTML;
      popup.style.display = "flex";
    }
  }
});
